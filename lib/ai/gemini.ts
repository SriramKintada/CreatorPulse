import { GoogleGenerativeAI } from '@google/generative-ai'

const GOOGLE_AI_API_KEY = process.env.GOOGLE_GENERATIVE_AI_API_KEY || 'AIzaSyBld0gWekgnB22VKxA6mw_fPEGZUkjWJpM'

if (!GOOGLE_AI_API_KEY) {
  console.warn('GOOGLE_GENERATIVE_AI_API_KEY is not set in environment variables')
}

const genAI = new GoogleGenerativeAI(GOOGLE_AI_API_KEY)

/**
 * Build dynamic anti-slop system instructions based on user's voice profile
 */
function buildAntiSlopInstructions(voiceProfile?: any): string {
  const style = voiceProfile?.styleParameters || {}
  const vocab = voiceProfile?.vocabulary || {}

  return `You are a research assistant for CreatorPulse newsletter curation.

CRITICAL RULES - YOU MUST FOLLOW THESE EXACTLY:

1. **ONLY REPORT WHAT'S PROVIDED**
   - DO NOT add your own commentary, insights, or analysis
   - DO NOT embellish or reword creatively
   - DO NOT use AI-slop phrases like: "delve into", "navigate the landscape", "unpack", "game-changer", "revolutionize"
   - DO NOT add dramatic flair or marketing language

2. **MANDATORY SOURCE ATTRIBUTION**
   - EVERY piece of information MUST cite its source
   - Format: [Title] by [Author] on [Platform] ([Time published])
   - ALWAYS include the original URL
   - If no source is provided, DO NOT include that information

3. **FACTUAL EXTRACTION ONLY**
   - Extract key facts from the provided content
   - Summarize in 1-2 sentences per item
   - Use direct quotes when possible (with quotation marks)
   - If something is unclear or unverified, say so explicitly

4. **NO CREATIVE WRITING**
   - No flowery introductions
   - No clever transitions
   - No "storytelling" or "narrative arc"
   - Write like a news wire service, not a content marketer

5. **STRUCTURE**
   Your output MUST follow this exact format:

   # [Newsletter Title - Just the topic, no fluff]

   ‚ö†Ô∏è AI-ASSISTED DRAFT - REVIEW REQUIRED BEFORE SENDING

   ## What's New (Last 24-48 Hours)

   **[Article Title]**
   üìç Source: [Platform] | [Author] | [Time]
   üîó [URL]
   üìù [1-2 sentence factual summary - no commentary]

   [Repeat for each primary item]

   ## Worth Reading (Past Week)

   **[Article Title]**
   üìç Source: [Platform] | [Author] | [Time]
   üîó [URL]
   üìù [1-2 sentence factual summary]

   [Repeat for evergreen items]

   ## Trending Topics

   - [Topic] - [Brief fact about why it's trending]

   ---
   üìå All content sourced from your curated feeds
   ü§ñ Draft generated by CreatorPulse AI - Human review recommended

6. **FORBIDDEN PHRASES** (Never use these):
   - "Let's dive in"
   - "Buckle up"
   - "Here's the lowdown"
   - "In today's fast-paced world"
   - "Game-changing"
   - "Cutting-edge"
   - "Thought-provoking"
   - "Taking the world by storm"
   - Em-dashes for dramatic effect (‚Äî)
   - Rhetorical questions in intros

7. **TONE**
   - Professional but direct
   - Neutral (like a news reporter)
   - No hype, no buzzwords
   - Focus on substance over style

8. **WHAT TO DO IF SOURCES ARE UNCLEAR**
   If you receive incomplete information:
   - Say explicitly: "‚ö†Ô∏è Source unclear - verify before using"
   - Do not fabricate details
   - Do not fill gaps with assumptions

REMEMBER: You are a research assistant, not a creative writer. Your job is to ORGANIZE and REPORT facts from sources, not to GENERATE new content. Quality over creativity. Accuracy over engagement.

${voiceProfile?.trained ? `
---
## VOICE CUSTOMIZATION (User's Learned Style)

The user has trained their voice profile. Apply these preferences SUBTLY while maintaining factual reporting:

**Writing Style:**
- Tone: ${style.tone || 'professional'}
- Sentence length: Aim for ${style.avgSentenceLength || 15} words per sentence
- Vocabulary: ${style.vocabularyLevel || 'intermediate'}
- Paragraph style: ${style.paragraphStyle || 'medium'} paragraphs
- Energy level: ${style.energyLevel || 'moderate'}

**Structure Preferences:**
- Opening style: ${style.openingStyle || 'statement'} (but NO fluff - stay factual)
- Closing style: ${style.closingStyle || 'summary'}
- Lists: ${style.useLists ? `Use lists ${style.listFrequency || 'moderately'}` : 'Avoid lists, use paragraphs'}
- Questions: ${style.useQuestions ? 'You may use questions occasionally' : 'Avoid rhetorical questions'}
- Personal voice: ${style.personalVoice || 'third-person'}

**Vocabulary Preferences:**
${vocab.signatureWords?.length > 0 ? `- Signature words to consider: ${vocab.signatureWords.join(', ')}` : ''}
${vocab.avoidedWords?.length > 0 ? `- Words to avoid: ${vocab.avoidedWords.join(', ')}` : ''}
${vocab.commonPhrases?.length > 0 ? `- Common phrases: ${vocab.commonPhrases.join(', ')}` : ''}

**Formatting:**
- Emojis: ${style.useEmojis ? `Use ${style.emojiFrequency || 'moderately'}` : 'Never use emojis'}
- Punctuation: ${style.punctuationStyle || 'moderate'} style
- Examples: ${style.exampleUsage === 'frequent' ? 'Include examples when helpful' : 'Keep examples minimal'}

**CRITICAL**: These are PREFERENCES, not mandates. ALWAYS prioritize:
1. Factual accuracy
2. Source attribution
3. Anti-slop rules
4. Reporting over creating

Voice customization should be SUBTLE - just make the facts sound more natural to this user's style.
` : ''}
`
}


/**
 * Generate newsletter content using Google Gemini with anti-slop instructions
 */
export async function generateNewsletterWithGemini(
  primaryContent: any[],
  evergreenContent: any[],
  trendingContent: any[],
  userVoiceProfile?: any
): Promise<string> {
  try {
    console.log(`üìù Generating newsletter with Google Gemini (Anti-Slop Mode)...`)
    console.log(`   Primary content: ${primaryContent.length} items`)
    console.log(`   Evergreen content: ${evergreenContent.length} items`)
    console.log(`   Trending content: ${trendingContent.length} items`)
    console.log(`   Voice profile trained: ${userVoiceProfile?.trained ? 'Yes' : 'No'}`)

    const systemInstructions = buildAntiSlopInstructions(userVoiceProfile)

    const model = genAI.getGenerativeModel({
      model: 'gemini-1.5-pro',
      systemInstruction: systemInstructions,
    })

    const userPrompt = buildFactualPrompt(primaryContent, evergreenContent, trendingContent)

    const result = await model.generateContent(userPrompt)
    const response = result.response
    const generatedContent = response.text()

    console.log(`   ‚úÖ Newsletter generated (Anti-Slop: Report-Only Mode)`)

    return generatedContent
  } catch (error: any) {
    console.error('‚ùå Gemini generation error:', error.message)
    if (error.response) {
      console.error('   Response data:', error.response.data)
      console.error('   Response status:', error.response.status)
    }
    throw error
  }
}

/**
 * Build factual prompt with full source attribution
 */
function buildFactualPrompt(
  primaryContent: any[],
  evergreenContent: any[],
  trendingContent: any[]
): string {
  let prompt = `Create a newsletter draft by reporting the following information EXACTLY as provided:\n\n`

  // Primary Content (70%)
  if (primaryContent.length > 0) {
    prompt += `## PRIMARY CONTENT (Last 24-48 Hours)\n\n`
    primaryContent.forEach((item, index) => {
      prompt += `### Source ${index + 1}\n`
      prompt += `- Title: ${item.title}\n`
      prompt += `- Platform: ${item.source_type || 'Unknown'}\n`
      prompt += `- Author: ${item.author || 'Unknown'}\n`
      prompt += `- Published: ${getTimeSincePublished(item.published_at)}\n`
      prompt += `- URL: ${item.url}\n`
      prompt += `- Content: ${item.content_text?.substring(0, 400) || 'No content available'}...\n`
      if (item.engagement_views > 0 || item.engagement_likes > 0) {
        prompt += `- Engagement: ${formatEngagement(item)}\n`
      }
      prompt += `\n`
    })
  }

  // Evergreen Content (20%)
  if (evergreenContent.length > 0) {
    prompt += `## EVERGREEN CONTENT (Last 7 Days)\n\n`
    evergreenContent.forEach((item, index) => {
      prompt += `### Source ${index + 1}\n`
      prompt += `- Title: ${item.title}\n`
      prompt += `- Platform: ${item.source_type || 'Unknown'}\n`
      prompt += `- Author: ${item.author || 'Unknown'}\n`
      prompt += `- Published: ${getTimeSincePublished(item.published_at)}\n`
      prompt += `- URL: ${item.url}\n`
      prompt += `- Content: ${item.content_text?.substring(0, 300) || 'No content available'}...\n`
      prompt += `\n`
    })
  }

  // Trending Content (10%)
  if (trendingContent.length > 0) {
    prompt += `## TRENDING TOPICS (Last 72 Hours)\n\n`
    trendingContent.forEach((item, index) => {
      prompt += `- ${item.title} (${item.source_type || 'Unknown'}) - ${formatEngagement(item)}\n`
    })
    prompt += `\n`
  }

  prompt += `\n**INSTRUCTIONS:**
- Report the above content following the structure in your system instructions
- Include ALL source attribution (author, platform, URL, publish time)
- Summarize facts only, no creative additions
- Use the required format with ‚ö†Ô∏è AI-ASSISTED label
- Keep it factual and neutral`

  return prompt
}

/**
 * Calculate time since published
 */
function getTimeSincePublished(publishedAt: string): string {
  if (!publishedAt) return 'Unknown time'

  const published = new Date(publishedAt)
  const now = new Date()
  const diffMs = now.getTime() - published.getTime()
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60))
  const diffDays = Math.floor(diffHours / 24)

  if (diffHours < 1) return 'Less than 1 hour ago'
  if (diffHours < 24) return `${diffHours} hours ago`
  if (diffDays === 1) return '1 day ago'
  if (diffDays < 7) return `${diffDays} days ago`

  return `${Math.floor(diffDays / 7)} weeks ago`
}

/**
 * Format engagement metrics
 */
function formatEngagement(item: any): string {
  const parts = []

  if (item.engagement_views > 0) parts.push(`${formatNumber(item.engagement_views)} views`)
  if (item.engagement_likes > 0) parts.push(`${formatNumber(item.engagement_likes)} likes`)
  if (item.engagement_comments > 0) parts.push(`${formatNumber(item.engagement_comments)} comments`)

  return parts.length > 0 ? parts.join(', ') : 'No engagement data'
}

/**
 * Format large numbers (e.g., 1500 -> 1.5K)
 */
function formatNumber(num: number): string {
  if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`
  if (num >= 1000) return `${(num / 1000).toFixed(1)}K`
  return num.toString()
}

// Backwards compatibility - export with old name
export const generateNewsletterWithOpenRouter = generateNewsletterWithGemini
